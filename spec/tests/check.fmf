summary: Additional test checks

story:
    As a tester I want to employ additional checks before, during
    and after test execution. These checks would complement the
    actual test by monitoring various aspects and side-effects of
    the test execution.

description: |
    In some cases we want to run additional checks while running a
    test. A nice example is a check for unexpected SELinux AVCs
    produced during the test, this can point to additional issues
    the user can run into. Another useful checks would be kernel
    panic detection, core dump collection or collection of system
    logs.
    By default, the check results affect the overall test outcome.
    To change this behaviour, use the 'result' key, which apart from
    the default ``respect`` can be changed to ``xfail``, which
    expects the check to fail, or ``info``, which changes the check
    result to 'INFO'.

    .. versionchanged:: 1.38.0 ``result`` key added

    See :ref:`/plugins/test-checks` for the list of available checks.

example:
  - |
    # Enable a single check, AVC denial detection.
    check: avc

  - |
    # Enable multiple checks, by listing their names. A list of names
    # is acceptable as well as a single name.
    check:
      - avc
      - dmesg

  - |
    # Enable multiple checks, one of them would be disabled temporarily.
    # Using `how` key to pick the check.
    check:
      - avc
      - kernel-panic
      - how: test-inspector
        enable: false

  - |
    # Expect the AVC check to fail
    check:
      - how: avc
        result: xfail
      - how: dmesg
        result: respect

  - |
    # Treat the dmesg check as informational only
    check:
      - how: dmesg
        result: info

link:
  - implemented-by: /tmt/checks
  - implemented-by: /tmt/result.py
  - verified-by: /tests/test/check/avc
  - verified-by: /tests/test/check/dmesg
  - verified-by: /tests/execute/result/check_results
